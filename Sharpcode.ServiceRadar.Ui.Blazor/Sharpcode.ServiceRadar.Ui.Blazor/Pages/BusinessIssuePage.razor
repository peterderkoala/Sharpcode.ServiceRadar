@page "/business-issues"
@implements IDisposable

@using System.Threading
@using ServiceRadar.Core
@using ServiceRadar.Core.Controllers
@using ServiceRadar.Model.Entities
@using Sharpcode.ServiceRadar.Ui.Blazor.Components.Modal;

@inject BusinessIssueDataController _businessIssueDataController

<style>
    main div.table-responsive.table-fixed-header {
        height: calc(100vh - 165px) !important;
        max-height: calc(100vh - 165px) !important;
    }
</style>


<Row>
    <Heading>Issues</Heading>
</Row>

@if (_loading)
{
    <Image Source="spinner.svg" Style="height: 25%;width: 25%;align-items: center;justify-content: center"/>
}
else
{
    <Row>
        <Button Color="Color.Secondary" Clicked="CreateNewClick">Neue Meldung</Button>
    </Row>
    <Row>
        <DataGrid TItem="BusinessIssue"
                  Data="_openIssues"
                  Responsive
                  FixedHeader
                  DetailRowStartsVisible=false>
            <DataGridColumns>
                <DataGridColumn TItem="BusinessIssue" Field="BusinessIssueId" Caption="#" />
                <DataGridColumn TItem="BusinessIssue" Field="Title" Caption="Titel" />
                <DataGridColumn TItem="BusinessIssue" Field="ImpactDuration" Caption="Dauer" />
                <DataGridColumn TItem="BusinessIssue" Field="IssueType" Caption="Type" />
                <DataGridColumn TItem="BusinessIssue" Field="BusinessIssuePriority" Caption="Prio" />
                <DataGridColumn TItem="BusinessIssue" Field="IssuedAt" Caption="Erzeugt" />
                <DataGridColumn Sortable="false">
                    <DisplayTemplate>
                        <Button Color="Color.Primary">Nachrichten</Button>
                        <Button Color="Color.Warning" Clicked="@(async() => { await UpdateIssueClick(context);})">Bearbeiten</Button>
                        <Button Color="Color.Danger">Schließen</Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
            <DetailRowTemplate>
                @{
                    var bodyText = (context as BusinessIssue).Body;
                    <Text>@bodyText</text>
                }
            </DetailRowTemplate>
        </DataGrid>
    </Row>
}


@code {

    [Inject]
    public IModalService ModalService { get; set; }

    private bool _loading = true;
    private List<BusinessIssue> _openIssues = new();

    private CancellationTokenSource cancellationToken = new CancellationTokenSource();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task CreateNewClick()
    {
        await ModalService.Show<NewIssueModal>(
            "Neue Meldung", 
            new ModalInstanceOptions() 
            { 
                Animated = true,  
                Size = ModalSize.Large, 
                Centered = true 
            });
    }

    private async Task UpdateIssueClick(BusinessIssue i)
    {
        await ModalService.Show<NewIssueModal>(
            "Update Meldung",
            parameters => parameters.Add(x => x.Issue, i),
            new ModalInstanceOptions() 
            { 
                Animated = true,  
                Size = ModalSize.Large, 
                Centered = true 
            });
    }

    private async Task LoadData()
    {
        _openIssues = await _businessIssueDataController.GetBusinessIssuesAsync(cancellationToken.Token);
        _loading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        cancellationToken?.Cancel();
        cancellationToken?.Dispose();
    }
}
